plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'java'
    id 'name.remal.check-updates' version '1.0.183'
    id 'org.owasp.dependencycheck' version '5.3.2'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

apply plugin: 'idea'
apply plugin: 'jacoco'
apply from: 'newrelic.gradle'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

dependencyCheck {
    analyzers {
        assemblyEnabled = false
    }
    failOnError = true
    skipTestGroups = false
    failBuildOnCVSS = 5
    format = 'ALL'
    suppressionFile = 'suppressions.xml'
    skipConfigurations = []
}

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
    compile.exclude module: 'spring-boot-starter-logging'
    compile.exclude group: 'org.apache.tomcat'
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}


dependencyManagement {
    dependencies {
        dependency 'org.projectlombok:lombok:1.18.10'
        dependency 'org.mapstruct:mapstruct-processor:1.3.1.Final'
        dependency 'org.mapstruct:mapstruct:1.3.1.Final'
    }
}


dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    annotationProcessor 'org.mapstruct:mapstruct-processor'
    implementation 'org.mapstruct:mapstruct'

    annotationProcessor 'org.hibernate:hibernate-jpamodelgen:5.4.12.Final'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-joda'

    implementation 'org.flywaydb:flyway-core:5.2.3'

    runtimeOnly 'org.postgresql:postgresql:42.2.12'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.mockito:mockito-core:2.+'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

bootRun {
    def default_environment = [
            "API_PORT"          : "8888",
            "ENVIRONMENT"       : "local",
            "DB_HOST"           : "localhost",
            "DB_PORT"           : "5432",
            "DB_NAME"           : "postgres",
            "DB_PASSWORD"       : "docker",
            "DB_MASTER_USER"    : "postgres",
            "DB_MASTER_PASSWORD": "docker",
    ]

    environment = [:]
    default_environment.each { name, defaultValue ->
        def systemValue = System.getenv(name)
        environment(name, systemValue != null ? systemValue : defaultValue)
    }

    jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:32328"]
}

